class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def construct_tree(preorder, inorder):
    if not preorder or not inorder:
        return None

    root_value = preorder.pop(0)
    root = TreeNode(root_value)
    root_index = inorder.index(root_value)

    root.left = construct_tree(preorder, inorder[:root_index])
    root.right = construct_tree(preorder, inorder[root_index + 1:])

    return root

def tree_height(root):
    if not root:
        return 0
    else:
        left_height = tree_height(root.left)
        right_height = tree_height(root.right)
        return max(left_height, right_height) + 1

# Given in-order and pre-order traversals
inorder = [8, 6, 9, 7, 4, 5, 2, 3, 1]
preorder = [1, 2, 6, 8, 9, 7, 4, 5, 3]

# Construct the binary tree
root = construct_tree(preorder, inorder)

# Find the height of the binary tree
height = tree_height(root)

print("Height of the binary tree:", height)